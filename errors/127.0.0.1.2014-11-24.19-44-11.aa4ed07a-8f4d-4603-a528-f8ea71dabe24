(dp1
S'output'
p2
S"<type 'exceptions.IndexError'> list index out of range"
p3
sS'layer'
p4
S'/Users/james/Documents/Dropbox/Uni/Year 4/iapt/assessment/web2py-2.9.11/web2py/applications/bootup/models/db.py'
p5
sS'code'
p6
S'from itertools import groupby\n\ndb = DAL(\'sqlite://bootup.db\',pool_size=1,check_reserved=[\'sqlite\'],migrate=False)\nauth = BootUpAuth(db)\n\ndb.define_table(\'category\',\n                Field(\'idcategory\',type=\'id\'),\n                Field(\'name\'),\n                Field(\'url\'))\n\n\ndb.define_table(\'user\',\n                Field(\'iduser\', type=\'id\', readable=False, writable=False, default=None),\n                Field(\'realname\',label=\'Name\', requires=[\n                    IS_LENGTH(minsize=1, error_message=\'Please enter your name\'),\n                    IS_LENGTH(maxsize=200, error_message=\'Please enter a shorter name\'),\n\n                ]),\n                Field(\'username\',label=\'Username\',requires=[\n                    IS_LENGTH(minsize=1, error_message=\'Please choose a username\'),\n                    IS_LENGTH(maxsize=60, error_message=\'Please chose a shorter username\'),\n                    IS_NOT_IN_DB(db,\'user.username\',error_message="Username is already taken")\n                ]),\n                Field(\'dateofbirth\',type=\'date\', label=\'Date of Birth\', requires=[\n                    IS_DATE(error_message=\'Please enter a date\'),\n                    #IS_DATE_IN_RANGE(error_message=\'Please enter a date in the recent past\')\n                ]),\n                Field.Method(\'age\', lambda row: request.now.year-row.dateofbirth.year\n                    if (request.now.month, request.now.day) >= (row.dateofbirth.month, row.dateofbirth.day) else\n                    request.now.year-row.dateofbirth.year-1),\n                Field.Method(\'expectedrewards\', lambda row: groupby(\n                    db(\n                        (db.expectedrewards.userid==row.user.iduser) &\n                        (db.expectedrewards.projectid==db.project.idproject) &\n                        (db.pledge.idpledge==db.expectedrewards.pledgeid) &\n                        projectstats)\n                    .select(db.expectedrewards.ALL,\n                            db.project.ALL,\n                            db.projectstat.ALL,\n                            db.pledge.ALL\n\n                            ),\n                    key=lambda item:item.project.idproject))\n)\n\n\n#As primary key is a reference to user, the type=\'id\' parameter cannot be set, use the primarykey= kwarg instead\ndb.define_table(\'credential\',\n                Field(\'userid\',type=\'reference user\', readable=False,writable=False),\n                Field(\'passwordhash\', writable=False, readable=False),\n                Field(\'passwordsalt\', writable=False, readable=False),\n                primarykey=[\'userid\']\n    )\n\n\n#There is a limitation with web2py that type=\'id\' only supports integer types,\n#as country code is a string, the primary key must be defined using the primarykey kwarg\ndb.define_table(\'country\',\n                Field(\'code\'),\n                Field(\'name\'),\n                primarykey=[\'code\'])\n\n\n#had to remove explicit reference to country code as for some reason web2py restricts all references to be numeric\n#to maintain constraint, the IS_IN_DB validator is used\ndb.define_table(\'address\',\n                Field(\'idaddress\',type=\'id\', readable=False, writable=False),\n                Field(\'street\', label=\'Street\', requires=[\n                    IS_LENGTH(minsize=1, error_message=\'Please enter your street address\'),\n                    IS_LENGTH(maxsize=100, error_message=\'Please enter a shorter street address\')\n                ]),\n                Field(\'city\', label=\'City\', requires=[\n                    IS_LENGTH(minsize=1, error_message=\'Please enter your city\'),\n                    IS_LENGTH(maxsize=100, error_message=\'Please enter a shorter city name\')\n                ]),\n                Field(\'postcode\', label=\'Post Code\', requires=[\n                    IS_MATCH(\'[a-zA-Z0-9]{4} [a-zA-Z0-9]{3}\',error_message=\'Postcode must be in the format XXXX XXX\')\n                ]),\n                Field(\'countrycode\',type=\'string\', requires=IS_IN_DB(db, db.country.code,\'%(name)s\',\n                                   zero=\'Select A Country\',\n                                   error_message=\'Please choose your country\'\n                                   )),\n                Field(\'userid\',type=\'reference user\',\n                      requires=IS_IN_DB(db,db.user.iduser),\n                      readable=False, writable=False)\n    )\n\n\n\n\n\n\n\ndb.define_table(\'project\',\n                Field(\'idproject\',type=\'id\',readable=False,writable=False),\n                Field(\'title\',\n                      type=\'string\',\n                      label=\'Project Name\',\n                      requires= [\n                        IS_LENGTH(60,error_message=\'Project title must be shorter than 60 characters\'),\n                        IS_NOT_EMPTY(error_message=\'Project must have a title\')\n                      ]),\n\n                Field(\'shortdescription\',\n                      label=\'Quick Summary\',\n                      type=\'text\',\n                      requires=[\n                          IS_LENGTH(120, error_message=\'Project summary must be shorter than 120 characters\'),\n                          IS_NOT_EMPTY(error_message=\'Project summary must be filled in\')\n                      ]),\n\n                Field(\'longdescription\',\n                      label=\'Description\',\n                      type=\'text\',\n                      requires=[\n                            IS_NOT_EMPTY(error_message=\'Project description must be filled in\')\n                      ]),\n\n                Field(\'story\',\n                      label=\'Project Story\',\n                      type=\'text\',\n                      requires=[\n                          IS_NOT_EMPTY(error_message=\'Project story must be filled in\')\n                      ]),\n\n                Field(\'goal\',\n                      label=\'Funding Goal\',\n                      type=\'decimal(10,2)\',\n                      requires=[\n                          IS_DECIMAL_IN_RANGE(minimum=100,error_message="Please enter a project goal greater than &pound;100"),\n                          IS_DECIMAL_IN_RANGE(maximum=10**8,error_message="Your project goal is too optimistic. Please chose a lower goal"),\n                                ]),\n\n                Field(\'categoryid\',\n                      type=\'reference category\',\n                      label=\'Category\',\n                      requires=IS_IN_DB(db, db.category.idcategory,\'%(name)s\',\n                                   zero=\'Select A Category\',\n                                   error_message=\'Please choose a category\'\n                                   )\n                ),\n\n                Field(\'managerid\',\n                      type=\'reference user\',\n                      requires=IS_IN_DB(db,db.user.iduser),\n                      default=auth.user_id,\n                      readable=False,\n                      writable=False\n                      ),\n\n                Field(\'imageurl\',type=\'upload\',label="Project Image",autodelete=True,required=[\n                    IS_IMAGE(error_message="File must be image"),\n                    IS_NOT_EMPTY(error_message="Please choose an image")]),\n\n                Field.Method(\'canopen\', lambda row:  auth.user_id==row.project.managerid and db(db.openproject.projectid==row.project.idproject).count()==0),\n                Field.Method(\'canclose\', lambda row: auth.user_id==row.project.managerid and db(db.openproject.projectid==row.project.idproject).count()==1 and db(db.closedproject.openprojectid==row.project.idproject).count()==0),\n                Field.Method(\'candelete\', lambda row: auth.user_id==row.project.managerid and (db(db.openproject.projectid==row.project.idproject).count()==0 or db(db.closedproject.openprojectid==row.project.idproject).count()==1)),\n                Field.Method(\'canedit\', lambda row: auth.user_id==row.project.managerid and db(db.openproject.projectid==row.project.idproject).count()==0),\n\n                Field.Method(\'hascontributed\', lambda row: db((db.booting.openprojectid==row.project.idproject) & (db.booting.userid == auth.user_id)).count() > 0),\n                Field.Method(\'pledges\', lambda row: db((db.pledge.projectid==row.project.idproject) & pledgestats).select(db.pledge.ALL,db.pledgestat.ALL, orderby=db.pledge.value)),\n                Field.Method(\'expectedrewards\', lambda row:  groupby(db((db.expectedrewards.projectid==row.project.idproject) & (db.user.id==db.expectedrewards.userid)).select(db.expectedrewards.ALL,db.user.ALL),key=lambda item:item.user.username)),\n                Field.Method(\'rewards\',lambda row: db(db.reward.projectid==row.project.idproject).select())\n)\n\ndb.define_table(\'pledge\',\n                Field(\'idpledge\', type=\'id\', readable=False, writable=False, default=None),\n                Field(\'description\',type=\'text\',requires=[\n                    IS_LENGTH(minsize=1,error_message=\'Please enter a description\'),\n                    IS_LENGTH(maxsize=60, error_message=\'Maximum length of pledge description is 60 characters\')\n                ]),\n                Field(\'value\',type=\'decimal(10,2)\',requires=[\n                    IS_DECIMAL_IN_RANGE(minimum=1, error_message=\'Please enter a suitable value for this pledge level\'),\n                    IS_DECIMAL_IN_RANGE(maximum=10000, error_message=\'The chosen pledge value is too high. Crowd funding relies on lots of people pledging small amounts. Why not choose something a bit lower?\')\n                ]),\n                Field(\'projectid\', type=\'reference project\', requires=IS_IN_DB(db,db.project.idproject)),\n                Field.Method(\'rewards\',lambda row:\n                    db((db.rewardpledge.pledgeid==row.pledge.idpledge)&(db.reward.idreward==db.rewardpledge.rewardid)).select(db.reward.ALL)))\n\n\ndb.define_table(\'pledgestat\',\n                Field(\'idpledge\',type=\'id\'),\n                Field(\'projectid\',type=\'integer\'),\n                Field(\'value\',type=\'decimal(10,2)\'),\n                Field(\'pledgecount\',type=\'integer\'),\n                Field(\'totalvalue\',type=\'decimal(10,2)\'))\n\ndb.define_table(\'expectedrewards\',\n                Field(\'userid\',type=\'integer\'),\n                Field(\'projectid\',type=\'integer\'),\n                Field(\'rewardid\',type=\'integer\'),\n                Field(\'pledgeid\',type=\'integer\'),\n                Field(\'rewarddescription\'),\n                Field(\'pledgedescription\'),\n                Field(\'value\',type=\'decimal(10,2)\'),\n                primarykey=[\'userid\',\'projectid\'])\n\ndb.define_table(\'openproject\',\n                Field(\'projectid\', type=\'reference project\', requires=IS_IN_DB(db,db.project.idproject)),\n                Field(\'opendate\', type=\'datetime\', default=request.now),\n                primarykey=[\'projectid\'])\n\ndb.define_table(\'closedproject\',\n                Field(\'openprojectid\', type=\'reference openproject\', requires=IS_IN_DB(db,db.openproject.projectid)),\n                Field(\'closeddate\',type=\'datetime\', default=request.now),\n                primarykey=[\'openprojectid\'])\n\n\n\ndb.define_table(\'Reward\',\n                Field(\'IdReward\',type=\'integer\'),\n                Field(\'description\',type=\'text\'),\n                Field(\'projectid\', type=\'integer\'),primarykey=[\'idreward\'])\n\n\ndb.define_table(\'rewardpledge\',\n                Field(\'rewardid\', type=\'reference reward\', requires=IS_IN_DB(db,db.reward.idreward,\'%(description)s\')),\n                Field(\'pledgeid\', type=\'reference pledge\', requires=IS_IN_DB(db,db.pledge.idpledge,\'\xc2\xa3%(value)s %(description)s\')),\n                primarykey=[\'rewardid\',\'pledgeid\'])\n\n\ndb.define_table(\'projectstat\',\n                Field(\'idproject\', type=\'id\'),\n                Field(\'goal\',type=\'decimal(10,2)\'),\n                Field(\'progress\', type=\'integer\'),\n                Field(\'funded\',type=\'integer\'),\n                Field(\'bootings\'),\n                Field(\'totalvalue\',type=\'decimal(10,2)\'),\n                Field(\'remaining\',type=\'decimal(10,2)\')\n                )\n\ndb.define_table(\'booting\',\n                Field(\'idbooting\',type=\'id\'),\n                Field(\'userid\', type=\'integer\'),\n                Field(\'openprojectid\',type=\'integer\'),\n                Field(\'pledgeid\',type=\'integer\'))\n\n\n\nmyprojects = (db.project.managerid == auth.user_id)\n\nclosedprojects  = (db.project.idproject.belongs(db()._select(db.closedproject.openprojectid)))\nopenprojects    = (db.project.idproject.belongs(db()._select(db.openproject.projectid)))\n\n\nincludeopendate = (db.project.idproject==db.openproject.projectid)\n\nnotstartedprojects = (~openprojects & ~closedprojects)\n\nprojectstats = (db.project.idproject == db.projectstat.idproject)\npledgestats = (db.pledge.idpledge == db.pledgestat.idpledge)\nfundedprojects = (db.projectstat.funded==1)\nnotfundedprojects = (db.projectstat.funded==0)\n\nsearchableprojects = (openprojects | closedprojects)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/james/Documents/Dropbox/Uni/Year 4/iapt/assessment/web2py-2.9.11/web2py/gluon/restricted.py", line 224, in restricted\n    exec ccode in environment\n  File "/Users/james/Documents/Dropbox/Uni/Year 4/iapt/assessment/web2py-2.9.11/web2py/applications/bootup/models/db.py", line 213, in <module>\n    Field(\'projectid\', type=\'integer\'),primarykey=[\'idreward\'])\n  File "/Users/james/Documents/Dropbox/Uni/Year 4/iapt/assessment/web2py-2.9.11/web2py/gluon/dal.py", line 8414, in define_table\n    table = self.lazy_define_table(tablename, *fields, **args)\n  File "/Users/james/Documents/Dropbox/Uni/Year 4/iapt/assessment/web2py-2.9.11/web2py/gluon/dal.py", line 8430, in lazy_define_table\n    table = table_class(self, tablename, *fields, **args)\n  File "/Users/james/Documents/Dropbox/Uni/Year 4/iapt/assessment/web2py-2.9.11/web2py/gluon/dal.py", line 8891, in __init__\n    and f.name ==_primarykey[0]][0]\nIndexError: list index out of range\n'
p11
s.